Remove-Variable * -ErrorAction SilentlyContinue; Remove-Module *; $error.Clear(); Clear-Host

chcp 65001

if( $exchangesesssion -eq $null)
{
    $exchange = read-host "Will you need to create a new user mailbox or contacts for partners (y/n)."

    if ($exchange -eq "y")
    {
        Write-Host "Please use your eu\a-**** account"
        $usercred = Get-Credential
        $exchangesesssion = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri http://zuse2pexch01.wkglobal.com/PowerShell -Authentication Kerberos -Credential $usercred
        Import-PSSession $exchangesesssion -DisableNameChecking
        Set-AdServerSettings -ViewEntireForest $True 
    }
    else
    {
        write-host "You can only use option 2 to update an existing user."
    }
    
}

#Import data from csv
#Select the Rainier output csv from enablon.dom
$FileBrowser = New-Object System.Windows.Forms.OpenFileDialog -Property @{ 
    InitialDirectory = "C:\WPT\Enablon\Rainier tickets\";
    Filter = "CSV (*.csv)|*.csv";
    }  

$null = $FileBrowser.ShowDialog()

$requests = import-csv -Path $FileBrowser.FileName -Delimiter ";"

#Process each request
foreach ($item in $requests)
{

    
    #Preparation work
    $given = $item.'First Name'
    $last = $item.'Last Name'
    $contract = $item."Type of contract"
    $extattribute13 = "E5"
    $name = $last+", "+$given
    $title = $item.'Job Title'
    $samaccountname = $item.newusername
    $email=$samaccountname+"@wolterskluwer.com"
    $password = $item.password
    $OU = "EU.wkglobal.com/EU-Organizations/WK-Enablon/Accounts/Users" 

    if ($contract -eq "Permanent Employee")
    {
        continue
    }

    Write-host "Account creation for $last, $given" -ForegroundColor cyan -BackgroundColor Black
        
    ##Create the new user          

    $operation = read-host "create a mailbox user (1) or finalize the user account (2)"

    if ($operation -eq "1")
    {
        New-RemoteMailbox -OnPremisesOrganizationalUnit $OU -Name $name -UserPrincipalName $email -firstname $given -lastname $last -initials '' -Password (ConvertTo-SecureString -String $password -AsPlainText -Force) -ResetPasswordOnNextLogon $false -archive
    }
        

    if ($operation -eq "2")
    {

        ##Retrieve the user AD object
        try
        {
            $user = get-aduser -Identity $samaccountname -Server 'eu' -Properties *
        }

        catch
        {
            Write-Host "The user $samaccountname doesn't exist in wkglobal AD yet, please retry in a few minutes" -ForegroundColor Red -BackgroundColor White
            continue
        }

        ##Retrieve the manager
        $manager_sam = Read-Host -Prompt "Manager account name (eg: caroline.cordier) for $($item.Manager)"
        try{
            $manager = get-aduser -Identity $manager_sam -Server 'eu'
        }
        catch{
            $manager = get-aduser -Identity $manager_sam -Server 'na'
        }

        ##Add group membership
        Add-ADPrincipalGroupMembership -Identity $user -MemberOf ENA-S-CustomPasswordPolicy,ENA-S-Enable-ActiveSync,ENA-S-Set-LegalHoldFiveYears

        ##Set the new user attributes

        #internal vs contractor
        if ($contract -eq "Contractor")
        {
            $user | Set-ADUser -manager $manager -Title "$title" -DisplayName $name -server 'eu'
            $user | Set-ADUser -add @{"ExtensionAttribute9"="Contractor"}
            $user | Set-ADUser -add @{"ExtensionAttribute13"="E5"}
        }

        else
        {
            $WDID = $item.'Workday ID'
            $user | Set-ADUser -manager $manager -Company "Enablon" -Title "$title" -DisplayName $name -server 'eu'
            $user | Set-ADUser -add @{"ExtensionAttribute3"="$WDID"}
            $user | Set-ADUser -add @{"ExtensionAttribute9"="Employee"}
            $user | Set-ADUser -add @{"ExtensionAttribute13"="E5"}

        }

        ##Set expiration date
        if (($contract -eq "Contractor") -or ($contract -eq "Trainee"))
        {
            $expirationdate = (get-date $item.'End date').AddDays(1)
            $user | Set-ADAccountExpiration -DateTime $expirationdate -Server 'eu'
        }

    }            
            
}












